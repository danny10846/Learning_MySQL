
Database Schema:

celebs  4 rows
id  INTEGER
name  TEXT
age INTEGER




SELECT * FROM celebs;   <---- to view what's in the celeb table



Query Results:

id    name      age
1 Justin Bieber 22
2 Beyonce Knowles 33
3 Jeremy Lin  26
4 Taylor Swift  26

A relational database is a database that organizes information into one or more tables. 
Here, the relational database contains one table. 

A table is a collection of data organized into rows and columns.
 Tables are sometimes referred to as relations. Here the table is celebs. 



 CREATE TABLE table_name (
   column_1 data_type,           <--- mySQL statement
   column_2 data_type, 
   column_3 data_type
);

CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital letters. Clauses can also be referred to as commands.

table_name refers to the name of the table that the command is applied to.

(column_1 data_type, column_2 data_type, column_3 data_type) is a parameter. A parameter is a list of columns, data types, or values that are passed to a clause as an argument. Here, the parameter is a list of column names and the associated data type.


///////////////

CREATE TABLE celebs (
   id INTEGER, 
   name TEXT,
   age INTEGER
);


INSERT INTO celebs (id, name, age)    <---- input into the celeb table format
VALUES (1, 'Justin Bieber', 21);

SELECT * FROM celebs;
SELECT name FROM celebs; <--- just name column data to view

SELECT always returns a new table called the result set.



////////////////

UPDATE celebs 
SET age = 22
WHERE id = 1;          <---- set age off justin biebs to 22

SELECT * FROM celebs;      

//////////////////

ALTER TABLE celebs 
ADD COLUMN twitter_handle TEXT;   <----- adding a new table

SELECT * FROM celebs;  


//////////////////

UPDATE celebs
SET twitter_handle = '@taylorswift13'
WHERE id = 4;

DELETE FROM celebs 
WHERE twitter_handle IS NULL;  <----- updating taylor swifts twitter handle on newly created column,
                                      and then deleting the null values to leave just swift's.
SELECT * FROM celebs;

////////////////////////

CREATE TABLE celebs (
   id INTEGER PRIMARY KEY, 
   name TEXT UNIQUE,
   date_of_birth TEXT NOT NULL,
   date_of_death TEXT DEFAULT 'Not Applicable',
);

Constraints that add information about how a column can be used are invoked after specifying the data type for a column. They can be used to tell the database to reject inserted data that does not adhere to a certain restriction.

PRIMARY KEY columns can be used to uniquely identify the row. Attempts to insert a row with an identical value to a row already in the table will result in a constraint violation which will not allow you to insert the new row.

UNIQUE columns have a different value for every row. This is similar to PRIMARY KEY except a table can have many different UNIQUE columns.

NOT NULL columns must have a value. Attempts to insert a row without a value for a NOT NULL column will result in a constraint violation and the new row will not be inserted.

DEFAULT columns take an additional argument that will be the assumed value for an inserted row if the new row does not specify a value for that column.
